{"version":3,"sources":["../src/app/environment/mourn.types.ts","../src/app/environment/configReader.ts","../src/app/environment/EnvironmentProvider.tsx"],"names":["createContext","useState","useEffect","useMemo","useContext"],"mappings":"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","file":"environment.js","sourcesContent":["/**\r\n * Mourn Configuration Types\r\n *\r\n * These types define the schema for the .mourn configuration file,\r\n * which allows users to customize which providers and themes are\r\n * included in their Templar project.\r\n */\r\n\r\nexport type ThemeName =\r\n  | 'light'\r\n  | 'dark'\r\n  | 'high-contrast'\r\n  | 'sepia-light'\r\n  | 'sepia-dark'\r\n  | 'solarized-dark'\r\n  | 'valor'\r\n  | 'valor-dark'\r\n  | 'system'\r\n  | 'auto';\r\n\r\nexport type ProviderName =\r\n  | 'auth'\r\n  | 'theme'\r\n  | 'toast'\r\n  | 'loading'\r\n  | 'modal'\r\n  | 'settings';\r\n\r\n/**\r\n * Configuration for the Authentication Provider\r\n */\r\nexport interface AuthProviderConfig {\r\n  /**\r\n   * Whether to enable the Auth provider\r\n   * @default true\r\n   */\r\n  enabled?: boolean;\r\n\r\n  /**\r\n   * Storage key for auth state persistence\r\n   * @default 'templar-auth'\r\n   */\r\n  storageKey?: string;\r\n}\r\n\r\n/**\r\n * Configuration for the Theme Provider\r\n */\r\nexport interface ThemeProviderConfig {\r\n  /**\r\n   * Whether to enable the Theme provider\r\n   * @default true\r\n   */\r\n  enabled?: boolean;\r\n\r\n  /**\r\n   * Default theme to use on first load\r\n   * @default 'system'\r\n   */\r\n  defaultTheme?: ThemeName;\r\n\r\n  /**\r\n   * HTML attribute to set theme on (e.g., 'data-theme', 'class')\r\n   * @default 'data-theme'\r\n   */\r\n  attribute?: string;\r\n\r\n  /**\r\n   * Storage key for theme preference persistence\r\n   * @default 'templar-theme'\r\n   */\r\n  storageKey?: string;\r\n\r\n  /**\r\n   * List of themes to make available\r\n   * If not specified, all themes are available\r\n   */\r\n  availableThemes?: ThemeName[];\r\n\r\n  /**\r\n   * Whether to include custom theme CSS\r\n   * @default true\r\n   */\r\n  includeCustomThemes?: boolean;\r\n}\r\n\r\n/**\r\n * Configuration for the Toast Provider\r\n */\r\nexport interface ToastProviderConfig {\r\n  /**\r\n   * Whether to enable the Toast provider\r\n   * @default true\r\n   */\r\n  enabled?: boolean;\r\n\r\n  /**\r\n   * Maximum number of toasts to display simultaneously\r\n   * @default 5\r\n   */\r\n  maxToasts?: number;\r\n\r\n  /**\r\n   * Default duration for toasts in milliseconds\r\n   * @default 5000\r\n   */\r\n  defaultDuration?: number;\r\n\r\n  /**\r\n   * Default position for toasts\r\n   * @default 'top-right'\r\n   */\r\n  defaultPosition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'top-center' | 'bottom-center';\r\n}\r\n\r\n/**\r\n * Configuration for the Loading Provider\r\n */\r\nexport interface LoadingProviderConfig {\r\n  /**\r\n   * Whether to enable the Loading provider\r\n   * @default true\r\n   */\r\n  enabled?: boolean;\r\n\r\n  /**\r\n   * Whether to show a global loading spinner\r\n   * @default true\r\n   */\r\n  showGlobalSpinner?: boolean;\r\n\r\n  /**\r\n   * Minimum loading time in milliseconds (prevents flash)\r\n   * @default 300\r\n   */\r\n  minLoadingTime?: number;\r\n}\r\n\r\n/**\r\n * Configuration for the Modal Provider\r\n */\r\nexport interface ModalProviderConfig {\r\n  /**\r\n   * Whether to enable the Modal provider\r\n   * @default true\r\n   */\r\n  enabled?: boolean;\r\n\r\n  /**\r\n   * Maximum number of modals that can be stacked\r\n   * @default 3\r\n   */\r\n  maxModals?: number;\r\n\r\n  /**\r\n   * Whether modals should close on overlay click\r\n   * @default true\r\n   */\r\n  closeOnOverlayClick?: boolean;\r\n\r\n  /**\r\n   * Whether modals should close on escape key\r\n   * @default true\r\n   */\r\n  closeOnEscape?: boolean;\r\n}\r\n\r\n/**\r\n * Configuration for the Settings Provider\r\n */\r\nexport interface SettingsProviderConfig {\r\n  /**\r\n   * Whether to enable the Settings provider\r\n   * @default true\r\n   */\r\n  enabled?: boolean;\r\n\r\n  /**\r\n   * Storage key for settings persistence\r\n   * @default 'templar-settings'\r\n   */\r\n  storageKey?: string;\r\n\r\n  /**\r\n   * Default settings to use\r\n   */\r\n  defaultSettings?: {\r\n    language?: string;\r\n    notifications?: {\r\n      enabled?: boolean;\r\n      sound?: boolean;\r\n      desktop?: boolean;\r\n    };\r\n    appearance?: {\r\n      animations?: boolean;\r\n      reducedMotion?: boolean;\r\n      fontSize?: 'sm' | 'md' | 'lg';\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * Component-specific configurations\r\n */\r\nexport interface ComponentConfig {\r\n  /**\r\n   * Components to include in the build\r\n   * If not specified, all components are included\r\n   */\r\n  include?: string[];\r\n\r\n  /**\r\n   * Components to exclude from the build\r\n   */\r\n  exclude?: string[];\r\n\r\n  /**\r\n   * Whether to include animation variants\r\n   * @default true\r\n   */\r\n  includeAnimations?: boolean;\r\n\r\n  /**\r\n   * Whether to include glassmorphic variants\r\n   * @default true\r\n   */\r\n  includeGlassmorphic?: boolean;\r\n}\r\n\r\n/**\r\n * Build and optimization configurations\r\n */\r\nexport interface BuildConfig {\r\n  /**\r\n   * Whether to tree-shake unused components\r\n   * @default true\r\n   */\r\n  treeShake?: boolean;\r\n\r\n  /**\r\n   * Whether to include CSS variables\r\n   * @default true\r\n   */\r\n  includeCSSVariables?: boolean;\r\n\r\n  /**\r\n   * Whether to include source maps\r\n   * @default false\r\n   */\r\n  sourceMaps?: boolean;\r\n\r\n  /**\r\n   * Prefix for CSS class names (for avoiding conflicts)\r\n   */\r\n  cssPrefix?: string;\r\n}\r\n\r\n/**\r\n * Main Mourn Configuration\r\n * This is the root configuration object for .mourn files\r\n */\r\nexport interface MournConfig {\r\n  /**\r\n   * Configuration version (for future compatibility)\r\n   * @default '1.0'\r\n   */\r\n  version?: string;\r\n\r\n  /**\r\n   * Project name\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * Provider configurations\r\n   */\r\n  providers?: {\r\n    auth?: AuthProviderConfig;\r\n    theme?: ThemeProviderConfig;\r\n    toast?: ToastProviderConfig;\r\n    loading?: LoadingProviderConfig;\r\n    modal?: ModalProviderConfig;\r\n    settings?: SettingsProviderConfig;\r\n  };\r\n\r\n  /**\r\n   * Component configurations\r\n   */\r\n  components?: ComponentConfig;\r\n\r\n  /**\r\n   * Build configurations\r\n   */\r\n  build?: BuildConfig;\r\n\r\n  /**\r\n   * Custom CSS variables to override\r\n   */\r\n  customVariables?: Record<string, string>;\r\n}\r\n\r\n/**\r\n * Default configuration used when no .mourn file is present\r\n */\r\nexport const DEFAULT_MOURN_CONFIG: Required<MournConfig> = {\r\n  version: '1.0',\r\n  name: 'Templar Project',\r\n  providers: {\r\n    auth: {\r\n      enabled: true,\r\n      storageKey: 'templar-auth',\r\n    },\r\n    theme: {\r\n      enabled: true,\r\n      defaultTheme: 'system',\r\n      attribute: 'data-theme',\r\n      storageKey: 'templar-theme',\r\n      includeCustomThemes: true,\r\n    },\r\n    toast: {\r\n      enabled: true,\r\n      maxToasts: 5,\r\n      defaultDuration: 5000,\r\n      defaultPosition: 'top-right',\r\n    },\r\n    loading: {\r\n      enabled: true,\r\n      showGlobalSpinner: true,\r\n      minLoadingTime: 300,\r\n    },\r\n    modal: {\r\n      enabled: true,\r\n      maxModals: 3,\r\n      closeOnOverlayClick: true,\r\n      closeOnEscape: true,\r\n    },\r\n    settings: {\r\n      enabled: true,\r\n      storageKey: 'templar-settings',\r\n      defaultSettings: {\r\n        language: 'en',\r\n        notifications: {\r\n          enabled: true,\r\n          sound: true,\r\n          desktop: false,\r\n        },\r\n        appearance: {\r\n          animations: true,\r\n          reducedMotion: false,\r\n          fontSize: 'md',\r\n        },\r\n      },\r\n    },\r\n  },\r\n  components: {\r\n    includeAnimations: true,\r\n    includeGlassmorphic: true,\r\n  },\r\n  build: {\r\n    treeShake: true,\r\n    includeCSSVariables: true,\r\n    sourceMaps: false,\r\n  },\r\n  customVariables: {},\r\n};\r\n\r\n/**\r\n * Type guard to check if a value is a valid MournConfig\r\n */\r\nexport function isMournConfig(value: any): value is MournConfig {\r\n  return (\r\n    typeof value === 'object' &&\r\n    value !== null &&\r\n    (!value.version || typeof value.version === 'string') &&\r\n    (!value.name || typeof value.name === 'string')\r\n  );\r\n}\r\n\r\n/**\r\n * Utility to merge user config with defaults\r\n */\r\nexport function mergeMournConfig(\r\n  userConfig: Partial<MournConfig>\r\n): Required<MournConfig> {\r\n  return {\r\n    version: userConfig.version ?? DEFAULT_MOURN_CONFIG.version,\r\n    name: userConfig.name ?? DEFAULT_MOURN_CONFIG.name,\r\n    providers: {\r\n      auth: {\r\n        ...DEFAULT_MOURN_CONFIG.providers.auth,\r\n        ...userConfig.providers?.auth,\r\n      },\r\n      theme: {\r\n        ...DEFAULT_MOURN_CONFIG.providers.theme,\r\n        ...userConfig.providers?.theme,\r\n      },\r\n      toast: {\r\n        ...DEFAULT_MOURN_CONFIG.providers.toast,\r\n        ...userConfig.providers?.toast,\r\n      },\r\n      loading: {\r\n        ...DEFAULT_MOURN_CONFIG.providers.loading,\r\n        ...userConfig.providers?.loading,\r\n      },\r\n      modal: {\r\n        ...DEFAULT_MOURN_CONFIG.providers.modal,\r\n        ...userConfig.providers?.modal,\r\n      },\r\n      settings: {\r\n        ...DEFAULT_MOURN_CONFIG.providers.settings,\r\n        ...userConfig.providers?.settings,\r\n        defaultSettings: {\r\n          ...DEFAULT_MOURN_CONFIG.providers.settings.defaultSettings,\r\n          ...userConfig.providers?.settings?.defaultSettings,\r\n        },\r\n      },\r\n    },\r\n    components: {\r\n      ...DEFAULT_MOURN_CONFIG.components,\r\n      ...userConfig.components,\r\n    },\r\n    build: {\r\n      ...DEFAULT_MOURN_CONFIG.build,\r\n      ...userConfig.build,\r\n    },\r\n    customVariables: {\r\n      ...DEFAULT_MOURN_CONFIG.customVariables,\r\n      ...userConfig.customVariables,\r\n    },\r\n  };\r\n}\r\n","/**\r\n * Configuration Reader Utility\r\n *\r\n * This module handles reading and parsing the .mourn configuration.\r\n * In Next.js/browser environments, configuration should be provided via:\r\n * 1. Direct import of mourn.config.ts/js\r\n * 2. window.__MOURN_CONFIG__ object\r\n * 3. Passed directly to RoundTable component\r\n */\r\n\r\nimport type { MournConfig } from './mourn.types';\r\nimport { DEFAULT_MOURN_CONFIG, mergeMournConfig, isMournConfig } from './mourn.types';\r\n\r\n/**\r\n * Global configuration storage\r\n * Can be set via setGlobalMournConfig() or window.__MOURN_CONFIG__\r\n */\r\nlet globalConfig: Required<MournConfig> | null = null;\r\n\r\n/**\r\n * Set the global mourn configuration\r\n * This should be called in your app's entry point or mourn.config.ts file\r\n *\r\n * @example\r\n * ```ts\r\n * // mourn.config.ts\r\n * import { setGlobalMournConfig } from '@templar/environment';\r\n *\r\n * setGlobalMournConfig({\r\n *   providers: {\r\n *     theme: { defaultTheme: 'dark' }\r\n *   }\r\n * });\r\n * ```\r\n */\r\nexport function setGlobalMournConfig(config: Partial<MournConfig>): void {\r\n  globalConfig = mergeMournConfig(config);\r\n}\r\n\r\n/**\r\n * Get the currently loaded global configuration\r\n * Returns null if no configuration has been set\r\n */\r\nexport function getGlobalMournConfig(): Required<MournConfig> | null {\r\n  return globalConfig;\r\n}\r\n\r\n/**\r\n * Clear the global configuration\r\n * Useful for testing or resetting state\r\n */\r\nexport function clearGlobalMournConfig(): void {\r\n  globalConfig = null;\r\n}\r\n\r\n/**\r\n * Attempts to read the .mourn configuration\r\n *\r\n * Priority order:\r\n * 1. Explicitly set global config (via setGlobalMournConfig)\r\n * 2. window.__MOURN_CONFIG__ (for browser injection)\r\n * 3. Default configuration\r\n *\r\n * @returns Parsed and validated MournConfig\r\n */\r\nexport async function readMournConfig(): Promise<Required<MournConfig>> {\r\n  try {\r\n    // 1. Check if global config has been set\r\n    if (globalConfig) {\r\n      return globalConfig;\r\n    }\r\n\r\n    // 2. Check browser environment for window.__MOURN_CONFIG__\r\n    if (typeof window !== 'undefined') {\r\n      const browserConfig = (window as any).__MOURN_CONFIG__;\r\n\r\n      if (browserConfig && isMournConfig(browserConfig)) {\r\n        globalConfig = mergeMournConfig(browserConfig);\r\n        return globalConfig;\r\n      }\r\n    }\r\n\r\n    // 3. Return defaults\r\n    if (!globalConfig) {\r\n      console.info('[Templar] No .mourn configuration provided. Using defaults.');\r\n      globalConfig = DEFAULT_MOURN_CONFIG;\r\n    }\r\n\r\n    return globalConfig;\r\n  } catch (error) {\r\n    console.error('[Templar] Error reading .mourn configuration:', error);\r\n    return DEFAULT_MOURN_CONFIG;\r\n  }\r\n}\r\n\r\n/**\r\n * Synchronous version of readMournConfig\r\n * Returns currently loaded config or defaults\r\n */\r\nexport function readMournConfigSync(): Required<MournConfig> {\r\n  if (globalConfig) {\r\n    return globalConfig;\r\n  }\r\n\r\n  if (typeof window !== 'undefined') {\r\n    const browserConfig = (window as any).__MOURN_CONFIG__;\r\n\r\n    if (browserConfig && isMournConfig(browserConfig)) {\r\n      globalConfig = mergeMournConfig(browserConfig);\r\n      return globalConfig;\r\n    }\r\n  }\r\n\r\n  globalConfig = DEFAULT_MOURN_CONFIG;\r\n  return globalConfig;\r\n}\r\n\r\n/**\r\n * Validates a MournConfig object\r\n *\r\n * @param config - Configuration to validate\r\n * @returns Array of validation errors (empty if valid)\r\n */\r\nexport function validateMournConfig(config: any): string[] {\r\n  const errors: string[] = [];\r\n\r\n  if (!isMournConfig(config)) {\r\n    errors.push('Invalid configuration format');\r\n    return errors;\r\n  }\r\n\r\n  // Validate version\r\n  if (config.version && typeof config.version !== 'string') {\r\n    errors.push('version must be a string');\r\n  }\r\n\r\n  // Validate providers\r\n  if (config.providers) {\r\n    const validProviders = ['auth', 'theme', 'toast', 'loading', 'modal', 'settings'];\r\n\r\n    Object.keys(config.providers).forEach((key) => {\r\n      if (!validProviders.includes(key)) {\r\n        errors.push(`Unknown provider: ${key}`);\r\n      }\r\n    });\r\n\r\n    // Validate theme config\r\n    if (config.providers.theme?.defaultTheme) {\r\n      const validThemes = [\r\n        'light',\r\n        'dark',\r\n        'high-contrast',\r\n        'sepia-light',\r\n        'sepia-dark',\r\n        'solarized-dark',\r\n        'valor',\r\n        'valor-dark',\r\n        'system',\r\n        'auto',\r\n      ];\r\n\r\n      if (!validThemes.includes(config.providers.theme.defaultTheme)) {\r\n        errors.push(`Invalid theme: ${config.providers.theme.defaultTheme}`);\r\n      }\r\n    }\r\n\r\n    // Validate numeric values\r\n    if (config.providers.toast?.maxToasts !== undefined) {\r\n      if (typeof config.providers.toast.maxToasts !== 'number' || config.providers.toast.maxToasts < 1) {\r\n        errors.push('toast.maxToasts must be a positive number');\r\n      }\r\n    }\r\n\r\n    if (config.providers.toast?.defaultDuration !== undefined) {\r\n      if (typeof config.providers.toast.defaultDuration !== 'number' || config.providers.toast.defaultDuration < 0) {\r\n        errors.push('toast.defaultDuration must be a non-negative number');\r\n      }\r\n    }\r\n\r\n    if (config.providers.modal?.maxModals !== undefined) {\r\n      if (typeof config.providers.modal.maxModals !== 'number' || config.providers.modal.maxModals < 1) {\r\n        errors.push('modal.maxModals must be a positive number');\r\n      }\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Pretty prints a MournConfig object for debugging\r\n */\r\nexport function debugMournConfig(config: MournConfig): void {\r\n  console.group('[Templar] Configuration');\r\n  console.log('Version:', config.version);\r\n  console.log('Name:', config.name);\r\n\r\n  console.group('Providers');\r\n  Object.entries(config.providers || {}).forEach(([name, providerConfig]) => {\r\n    console.log(`${name}:`, providerConfig);\r\n  });\r\n  console.groupEnd();\r\n\r\n  if (config.components) {\r\n    console.log('Components:', config.components);\r\n  }\r\n\r\n  if (config.build) {\r\n    console.log('Build:', config.build);\r\n  }\r\n\r\n  if (config.customVariables && Object.keys(config.customVariables).length > 0) {\r\n    console.log('Custom Variables:', config.customVariables);\r\n  }\r\n\r\n  console.groupEnd();\r\n}\r\n","'use client';\r\n\r\nimport React, { createContext, useContext, useEffect, useState, useMemo } from 'react';\r\nimport type { MournConfig } from './mourn.types';\r\nimport { DEFAULT_MOURN_CONFIG, mergeMournConfig } from './mourn.types';\r\nimport { readMournConfig, debugMournConfig } from './configReader';\r\n\r\ninterface EnvironmentContextType {\r\n  config: Required<MournConfig>;\r\n  isLoading: boolean;\r\n  error: Error | null;\r\n  reload: () => Promise<void>;\r\n}\r\n\r\nconst EnvironmentContext = createContext<EnvironmentContextType | undefined>(undefined);\r\n\r\ninterface EnvironmentProviderProps {\r\n  children: React.ReactNode;\r\n  /**\r\n   * Override configuration (useful for testing or when .mourn file isn't available)\r\n   */\r\n  config?: Partial<MournConfig>;\r\n  /**\r\n   * Whether to enable debug logging\r\n   * @default false\r\n   */\r\n  debug?: boolean;\r\n}\r\n\r\n/**\r\n * Environment Provider\r\n *\r\n * This provider loads and manages the .mourn configuration file,\r\n * making it available throughout the application.\r\n */\r\nexport function EnvironmentProvider({\r\n  children,\r\n  config: overrideConfig,\r\n  debug = false,\r\n}: EnvironmentProviderProps) {\r\n  const [config, setConfig] = useState<Required<MournConfig>>(\r\n    overrideConfig ? mergeMournConfig(overrideConfig) : DEFAULT_MOURN_CONFIG\r\n  );\r\n  const [isLoading, setIsLoading] = useState(!overrideConfig);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  const loadConfig = async () => {\r\n    if (overrideConfig) {\r\n      // If override config is provided, merge it with defaults\r\n      const merged = mergeMournConfig(overrideConfig);\r\n      setConfig(merged);\r\n      setIsLoading(false);\r\n\r\n      if (debug) {\r\n        debugMournConfig(merged);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      const loadedConfig = await readMournConfig();\r\n      setConfig(loadedConfig);\r\n\r\n      if (debug) {\r\n        debugMournConfig(loadedConfig);\r\n      }\r\n    } catch (err) {\r\n      console.error('[Templar] Failed to load .mourn configuration:', err);\r\n      setError(err instanceof Error ? err : new Error('Unknown error loading configuration'));\r\n      setConfig(DEFAULT_MOURN_CONFIG);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadConfig();\r\n  }, []); // Only run once on mount\r\n\r\n  const contextValue = useMemo(\r\n    () => ({\r\n      config,\r\n      isLoading,\r\n      error,\r\n      reload: loadConfig,\r\n    }),\r\n    [config, isLoading, error]\r\n  );\r\n\r\n  return (\r\n    <EnvironmentContext.Provider value={contextValue}>\r\n      {children}\r\n    </EnvironmentContext.Provider>\r\n  );\r\n}\r\n\r\n/**\r\n * Hook to access the environment configuration\r\n *\r\n * @throws Error if used outside of EnvironmentProvider\r\n */\r\nexport function useEnvironment(): EnvironmentContextType {\r\n  const context = useContext(EnvironmentContext);\r\n\r\n  if (context === undefined) {\r\n    throw new Error('useEnvironment must be used within an EnvironmentProvider');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\n/**\r\n * Hook to access just the configuration (most common use case)\r\n */\r\nexport function useMournConfig(): Required<MournConfig> {\r\n  const { config } = useEnvironment();\r\n  return config;\r\n}\r\n\r\n/**\r\n * Hook to check if a specific provider is enabled\r\n */\r\nexport function useProviderEnabled(providerName: keyof Required<MournConfig>['providers']): boolean {\r\n  const { config } = useEnvironment();\r\n  return config.providers[providerName]?.enabled ?? true;\r\n}\r\n\r\n/**\r\n * Hook to get configuration for a specific provider\r\n */\r\nexport function useProviderConfig<T extends keyof Required<MournConfig>['providers']>(\r\n  providerName: T\r\n): Required<MournConfig>['providers'][T] {\r\n  const { config } = useEnvironment();\r\n  return config.providers[providerName];\r\n}\r\n"]}